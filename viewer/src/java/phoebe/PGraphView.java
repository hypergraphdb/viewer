package phoebe;import java.awt.Color;import java.awt.Paint;import java.awt.event.InputEvent;import java.awt.geom.Point2D;import java.beans.PropertyChangeSupport;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import javax.swing.JComponent;import javax.swing.SwingUtilities;import org.hypergraphdb.HyperGraph;import org.hypergraphdb.viewer.FEdge;import org.hypergraphdb.viewer.FNode;import org.hypergraphdb.viewer.HGVComponent;import org.hypergraphdb.viewer.util.PrimeFinder;import phoebe.event.BirdsEyeView;import phoebe.event.PEdgeHandler;import phoebe.event.PEdgeSelectionHandler;import phoebe.event.PGraphEditEventHandler;import phoebe.event.PSelectionHandler;import phoebe.event.PToolTipHandler;import phoebe.event.SquiggleEventHandler;import phoebe.util.PrintingFixTextNode;import edu.umd.cs.piccolo.PCanvas;import edu.umd.cs.piccolo.PLayer;import edu.umd.cs.piccolo.PNode;import edu.umd.cs.piccolo.event.PInputEvent;import edu.umd.cs.piccolo.event.PInputEventFilter;import edu.umd.cs.piccolo.event.PZoomEventHandler;import edu.umd.cs.piccolo.util.PPaintContext;/** * <BR> * Default Behaviors:<BR> * <table cellpadding="2" cellspacing="2" border="1" style="text-align: left; * width: 100%;"> * <tr> * <td style="vertical-align: top;"> Middle-Click + Drag<br> * </td> * <td style="vertical-align: top;"> Move the entire canvas around the window<br> * </td> * </tr> * <tr> * <td style="vertical-align: top;"> Right-Click + Drag<br> * </td> * <td style="vertical-align: top;"> Zoom in and Out<br> * </td> * </tr> * <tr> * <td style="vertical-align: top;"> Left-Click + Drag<br> * </td> * <td style="vertical-align: top;"> Selection Marquee<br> * </td> * </tr> * <tr> * <td style="vertical-align: top;"> CTRL+Left-Click on a FNode<br> * </td> * <td style="vertical-align: top;"> Start Making and FEdge, CTRL+Left-Click on * a different FNode to complete the edge.<br> * </td> * </tr> * </table> *  * <br> *  */public class PGraphView {	public static int NODE_X_POSITION = 0;	public static int NODE_Y_POSITION = 1;	public static int NODE_SHAPE = 2;	public static int NODE_PAINT = 3;	public static int NODE_SELECTION_PAINT = 4;	public static int NODE_BORDER_PAINT = 5;	public static int NODE_BORDER_WIDTH = 6;	public static int NODE_WIDTH = 7;	public static int NODE_HEIGHT = 8;	public static int NODE_LABEL = 9;	public static int NODE_Z_POSITION = 10;	public static int EDGE_WIDTH = 0;	public static int EDGE_LINE_TYPE = 1;	public static int EDGE_PAINT = 2;	public static int EDGE_SELECTION_PAINT = 3;	public static int EDGE_SOURCE_END_TYPE = 4;	public static int EDGE_SOURCE_END_PAINT = 5;	public static int EDGE_SOURCE_END_SELECTED_PAINT = 6;	public static int EDGE_TARGET_END_TYPE = 7;	public static int EDGE_TARGET_END_PAINT = 8;	public static int EDGE_TARGET_END_SELECTED_PAINT = 9;		public boolean updateEdges = true;	// init	protected boolean isInitialized = false;	// The Piccolo PCanvas that we will draw on	private PCanvas canvas;		protected Map<FNode, PNodeView> nodeViewMap;	protected Map<FEdge, PEdgeView> edgeViewMap;	// PCS support	protected PropertyChangeSupport pcs = new PropertyChangeSupport(this);	// A JPanel for the Canvas in the middle, and some other stuff around 	protected HGVComponent viewComponent;	// Piccolo Stuff for this class	protected PSelectionHandler selectionHandler;	protected PEdgeSelectionHandler edgeSelectionHandler;	protected PGraphEditEventHandler graphEditEventHandler;	protected PEdgeHandler edgeHandler;	protected PToolTipHandler toolTipHandler;	protected SquiggleEventHandler squiggleEventHandler;	protected boolean edgeSelection = false;	protected boolean nodeSelection = false;		// layer	protected PLayer nodeLayer;	protected PLayer edgeLayer;	protected PLayer objectLayer;	protected PLayer squiggleLayer;	protected Color DEFAULT_BACKGROUND_COLOR = new java.awt.Color(60, 98, 176);		protected HashMap<String, Object[]> contextMenuStore;	protected Set<FNode> nodeSelectionList = new HashSet<FNode>();	protected Set<FEdge> edgeSelectionList = new HashSet<FEdge>();	protected static boolean firePiccoloEvents = true;			/**     * Data store for Nodes     */    protected Map<FNode, Object[]> nodeDataStore =         new HashMap<FNode, Object[]>();           /**     * Data store for Edges     */    protected Map<FEdge, Object[]> edgeDataStore =          new HashMap<FEdge, Object[]>();         /**     * A unique Identifier for the Model     */    protected String identifier;           // Keep Track of the Default FNode Position    public double DEFAULT_X = 100;    // Keep Track of the Default FNode Position    public double DEFAULT_Y = 100;    // Default FNode Paint    public static Paint DEFAULT_NODE_PAINT = java.awt.Color.lightGray;    // Default FNode Selection Paint    public static Paint DEFAULT_NODE_SELECTION_PAINT = java.awt.Color.yellow;    // Deafult Border Paint    public static Paint DEFAULT_BORDER_PAINT = java.awt.Color.black;    public static Paint DEFAULT_EDGE_STROKE_PAINT = java.awt.Color.black;    public static Paint DEFAULT_EDGE_STROKE_PAINT_SELECTION = java.awt.Color.red;    public static Paint DEFAULT_EDGE_END_PAINT = java.awt.Color.black;        protected Object[] NODE_DEFAULTS = new Object[] { new Double(DEFAULT_X),            new Double(DEFAULT_Y), new Integer(PNodeView.OCTAGON),            DEFAULT_NODE_PAINT, DEFAULT_NODE_SELECTION_PAINT,            DEFAULT_BORDER_PAINT, new Float(1), new Double(20),            new Double(20), "FNode" };    protected Object[] EDGE_DEFAULTS = new Object[] { new Float(1), new Integer(PEdgeView.STRAIGHT_LINES),            DEFAULT_EDGE_STROKE_PAINT, DEFAULT_EDGE_STROKE_PAINT_SELECTION,            new Integer(2), DEFAULT_EDGE_END_PAINT, DEFAULT_EDGE_END_PAINT,            new Integer(3), DEFAULT_EDGE_END_PAINT, DEFAULT_EDGE_END_PAINT };	    protected HyperGraph graph;        public HyperGraph getHyperGraph() {        return graph;    }	// ----------------------------------------//	// Constructors and Initialization	// ----------------------------------------//	/**	 */	public PGraphView(HyperGraph db,             Collection<FNode> nodes, Collection<FEdge> edges,  String title)	{	    this.graph = db;	    this.setIdentifier(title);	   // initialize all of the Viewable objects based on all of        // the Edges and Nodes currently in the GraphPerspective        nodeViewMap = new HashMap<FNode, PNodeView>(PrimeFinder                .nextPrime(nodes.size()));        edgeViewMap = new HashMap<FEdge, PEdgeView>(PrimeFinder                .nextPrime(edges.size()));		initializePGraphView(nodes, edges, true);	}		/**	 * Initialize this view by setting up the enclosing JComponent, setting up	 * the Piccolo-centric event handlers, and creating all of the viewable	 * objects from the model	 * 	 * @see createViewMatrix	 * @see initializeEventHandlers	 */	protected void initializePGraphView(Collection<FNode> nodes, Collection<FEdge> edges, boolean setup) 	{		}	/**	 * 	 * This will provide the default feel for P-based apps.	 * 	 */	protected void initializeEventHandlers() {		// Add a FNode Selection Handler		selectionHandler = new PSelectionHandler(getCanvas().getLayer(),				getNodeLayer(), getCanvas().getCamera());		selectionHandler.setEventFilter(new PInputEventFilter(				InputEvent.BUTTON1_MASK));		// enableNodeSelection();		// Add an FEdge Selection Handler		edgeSelectionHandler = new PEdgeSelectionHandler(				getCanvas().getLayer(), getEdgeLayer(), getCanvas().getCamera());		edgeSelectionHandler.setEventFilter(new PInputEventFilter(				InputEvent.BUTTON1_MASK));		// enableEdgeSelection();		// Add a Edit Handler		graphEditEventHandler = new PGraphEditEventHandler(getCanvas(), this);		// getCanvas().addInputEventListener(graphEditEventHandler);		// Only allow panning via Middle Mouse button		getCanvas().getPanEventHandler().setEventFilter(				new PInputEventFilter(InputEvent.BUTTON2_MASK));		PZoomEventHandler zoomer = new PZoomEventHandler() {			public void dragActivityFinalStep(PInputEvent e) {				// System.out.println( "Scale: "+e.getCamera().getViewScale() );				if (e.getCamera().getViewScale() < .45) {					 getCanvas().setDefaultRenderQuality(PPaintContext.LOW_QUALITY_RENDERING);				} else {					 getCanvas().setDefaultRenderQuality(PPaintContext.HIGH_QUALITY_RENDERING);				}			}		};		zoomer.setMinScale(.15);		zoomer.setMaxScale(7);		zoomer.setEventFilter(new PInputEventFilter(InputEvent.BUTTON3_MASK));		getCanvas().setZoomEventHandler(zoomer);		// set the minumum zoom		// getCanvas().getZoomEventHandler().		// setMinScale( .1 );		// // add the zoom event handler		// getCanvas().getZoomEventHandler().		// setEventFilter(new PInputEventFilter(InputEvent.BUTTON3_MASK));		// add the FEdge Selection handler		edgeHandler = new PEdgeHandler(this);		getCanvas().addInputEventListener(edgeHandler);				// add the tool tip handler		toolTipHandler = new PToolTipHandler(getCanvas().getCamera());		getCanvas().getCamera().addInputEventListener(toolTipHandler);		// create the Squiggle handler		squiggleEventHandler = new SquiggleEventHandler(squiggleLayer,				getCanvas(), this);	}	public PEdgeHandler getEdgeHandler() {		return edgeHandler;	}	public void nodeSelected(PNodeView node) {		nodeSelectionList.add(node.getNode());		//network.getFlagger().setFlagged(node.getNode(), true);	}	public void nodeUnselected(PNodeView node) {		nodeSelectionList.remove(node.getNode());		//network.getFlagger().setFlagged(node.getNode(), false);	}	public void edgeSelected(PEdgeView edge) {		edgeSelectionList.add(edge.getEdge());		//network.getFlagger().setFlagged(edge.getEdge(), true);	}	public void edgeUnselected(PEdgeView edge) {		edgeSelectionList.remove(edge.getEdge());		//network.getFlagger().setFlagged(edge.getEdge(), true);	}	protected void clearNodeSelectionList() {		nodeSelectionList.clear();	}		protected void clearEdgeSelectionList() {		edgeSelectionList.clear();	}	/**	 * @return a list of the selected PNodeView	 */	public List<PNodeView> getSelectedNodes() {		ArrayList<PNodeView> selected = new ArrayList<PNodeView>(				nodeSelectionList.size());		for (FNode n : nodeSelectionList)			selected.add(getNodeView(n));		return selected;	}		public PNodeView getSelectedNodeView()	{	    List<PNodeView> res = getSelectedNodes();	    return (res.size() == 0 ) ? null: res.get(0);	}	/**	 * 	 * @return a list of the selected PEdgeView	 * 	 */	public List<PEdgeView> getSelectedEdges() {		ArrayList<PEdgeView> selected = new ArrayList<PEdgeView>(				edgeSelectionList.size());		for (FEdge idx: edgeSelectionList)				selected.add(getEdgeView(idx));		return selected;	}	public void prepareToPrint() {		getCanvas().getCamera().addClientProperty(				PrintingFixTextNode.PRINTING_CLIENT_PROPERTY_KEY, "true");	}	public void donePrinting() {		getCanvas().getCamera().addClientProperty(				PrintingFixTextNode.PRINTING_CLIENT_PROPERTY_KEY, null);	}	public double getWidth() {		return getCanvas().getWidth();	}	public double getHeight() {		return getCanvas().getHeight();	}	/**	 * @param the new Paint for the background	 */	public void setBackgroundPaint(Paint paint) {		getCanvas().getCamera().setPaint(paint);	}	/**	 * 	 * @return the backgroundPaint	 * 	 */	public Paint getBackgroundPaint() {		return getCanvas().getCamera().getPaint();	}	// ----------------------------------------//	// Event Handlers	// ----------------------------------------//	public boolean nodeSelectionEnabled() {		return nodeSelection;	}	public boolean edgeSelectionEnabled() {		return edgeSelection;	}	public void enableNodeSelection() {		if (!nodeSelection) {			getCanvas().addInputEventListener(getSelectionHandler());		}		nodeSelection = true;	}	public void disableNodeSelection() {		if (nodeSelection) {			getCanvas().removeInputEventListener(getSelectionHandler());		}		nodeSelection = false;	}	/**	 * 	 * @return The Selection Handler	 * 	 */	public PSelectionHandler getSelectionHandler() {		return selectionHandler;	}	public void enableEdgeSelection() {		if (!edgeSelection) {			getCanvas().addInputEventListener(getEdgeSelectionHandler());		}		edgeSelection = true;	}	public void disableEdgeSelection() {		if (edgeSelection) {			getCanvas().removeInputEventListener(getEdgeSelectionHandler());		}		edgeSelection = false;	}	public PEdgeSelectionHandler getEdgeSelectionHandler() {		return edgeSelectionHandler;	}	public void enablePanning() {		getCanvas().addInputEventListener(getCanvas().getPanEventHandler());	}	public void disablePanning() {		getCanvas().removeInputEventListener(getCanvas().getPanEventHandler());	}	/**	 * 	 * @return the Squiggle Event Handler	 * 	 */	public SquiggleEventHandler getSquiggleHandler() {		return squiggleEventHandler;	}	/**	 * 	 * This BirdsEyeView only looks at the nodes.	 * 	 * @return The BirdsEyeView that needs to be put into a frame/dialog/pane	 * 	 */	public JComponent getBirdsEyeView() {		BirdsEyeView canvas = new BirdsEyeView();		canvas.connect(getCanvas(), new PLayer[] { getCanvas().getLayer() });		return canvas;	}	/**	 * 	 * @return HGVComponent that can be added to most screen things	 * 	 */	public HGVComponent getComponent() {		return viewComponent;	}	/**	 * @return The Piccolo PCanvas that the Graph is Drawn on	 */	public PCanvas getCanvas() 	{		return canvas;	}	/**	 * @return The PLayer that all Nodes are added to	 */	public PLayer getNodeLayer() {		return nodeLayer;	}	/**	 * @return The PLayer that all Edges are added to	 */	public PLayer getEdgeLayer() {		return edgeLayer;	}	/**	 * @return The PLayer that all non-FNode and non-FEdge objects can be added	 *         to	 */	public PLayer getObjectLayer() {		return objectLayer;	}	/**	 * @param node Access to adding a FNode to the Graph	 */	public void addToNodeLayer(PNode node) {		nodeLayer.addChild(node);	}	/**	 * 	 * @param edge	 *            Access to adding an FEdge to the Graph	 * 	 */	public void addToEdgeLayer(PNode edge) {		edgeLayer.addChild(edge);	}	/**	 * This method will create a Viewable PNode derivative for every node and	 * FEdge in the network	 */	protected void createViewableObjects(Collection<FNode> nodes, Collection<FEdge> edges) 	{		firePiccoloEvents = false;		long time = System.currentTimeMillis();		for (FNode node: nodes) {						setAllNodePropertyData(node, (Object[]) NODE_DEFAULTS.clone());			PNodeView node_view = new PNodeView(node, this);			nodeViewMap.put(node, node_view);			addToNodeLayer(node_view);		}		System.out.println("Create Nodes took: "				+ (System.currentTimeMillis() - time));		for (FEdge edge : edges) {			// TODO:???			EDGE_DEFAULTS[0] = edge.getSource();			EDGE_DEFAULTS[1] = edge.getTarget();			setAllEdgePropertyData(edge, (Object[]) EDGE_DEFAULTS.clone());			PEdgeView edge_view = new PEdgeView(edge, this);			addToEdgeLayer(edge_view);			edgeViewMap.put(edge, edge_view);		}		firePiccoloEvents = true;		System.out.println("Create Viewable Object took: "	+ (System.currentTimeMillis() - time));	}	/**	 * @param node	 *            the index of a node to have a view created for it	 * @return a new PNodeView based on the node with the given index	 */	public PNodeView addNodeView(FNode node) {		if (DEFAULT_X % 2000 == 0) {			DEFAULT_Y += 100;			DEFAULT_X = 100;		} else {			DEFAULT_X += 100;		}		// Only need to Change the X and Y		NODE_DEFAULTS[0] = new Double(DEFAULT_X);		NODE_DEFAULTS[1] = new Double(DEFAULT_Y);		setAllNodePropertyData(node, (Object[]) NODE_DEFAULTS.clone());		PNodeView node_view = new PNodeView(node, this);		nodeViewMap.put(node, node_view);		addToNodeLayer(node_view);		return node_view;	}	public PEdgeView addEdgeView(FEdge edge) {		EDGE_DEFAULTS[0] = edge.getSource();		EDGE_DEFAULTS[1] = edge.getTarget();		 setAllEdgePropertyData(edge, (Object[]) EDGE_DEFAULTS.clone());		PEdgeView edge_view = new PEdgeView(edge, this);		addToEdgeLayer(edge_view);		// getCanvas().getLayer().addChild( edge_view );		edgeViewMap.put(edge, edge_view);		return edge_view;	}	/**	 * This will entirely remove a PNodeView/PEdgeView from the GraphView. This	 * is different than	 * 	 * @see{hideGraphObject} as that method simply stops showing the node/edge.	 *                       This method will destroy the object. It will be	 *                       returned though, so that a reference can be kept	 *                       for undo purposes.	 */	public PNodeView removeNodeView(PNodeView node_view) {		try {			node_view.removeFromParent();		} catch (Exception e) {			// System.out.println( "Parent was most likeley null for: "+			// node_view );			return null;		}		nodeViewMap.remove(node_view.getNode());		nodeSelectionList.remove(node_view.getNode());		return node_view;	}	/**	 * This will entirely remove a PNodeView/PEdgeView from the GraphView. This	 * is different than	 * 	 * @see{hideGraphObject} as that method simply stops showing the node/edge.	 *                       This method will destroy the object. It will be	 *                       returned though, so that a reference can be kept	 *                       for undo purposes.	 */	public PNodeView removeNodeView(FNode node) {		PNodeView node_view = (PNodeView) getNodeView(node);		try {			node_view.removeFromParent();		} catch (Exception e) {			// System.out.println( "Parent was most likeley null for: "+ node);			return null;		}		nodeViewMap.remove(node_view.getNode());		nodeSelectionList.remove(node_view.getNode());		return node_view;	}	/**	 * 	 * This will entirely remove a PNodeView/PEdgeView from the GraphView. This	 * is different than	 * 	 * @see{hideGraphObject} as that method simply stops showing the node/edge.	 *                       This method	 * 	 * will destroy the object. It will be returned though, so that a reference	 * can be kept	 * 	 * for undo purposes.	 * 	 */	public PEdgeView removeEdgeView(PEdgeView edge_view) {		try {			edge_view.removeFromParent();		} catch (Exception e) {			// System.out.println( "Parent was most likeley null for: " +			// edge_view );			return null;		}		edgeViewMap.remove(edge_view);		edgeSelectionList.remove(edge_view.getEdge());		return edge_view;	}	/**	 * This will entirely remove a PNodeView/PEdgeView from the GraphView. 	 */	public PEdgeView removeEdgeView(FEdge edge)	{		PEdgeView edge_view = (PEdgeView) getEdgeView(edge);		return removeEdgeView(edge_view);	}	/**	 * @return The Unique Identifier of this GraphView	 */	public String getIdentifier() {		return identifier;	} 	/**	 * 	 * @param new_identifier	 *            The New Identifier for this GraphView	 * 	 */	public void setIdentifier(String new_identifier) {		if (new_identifier != null) 			if (new_identifier.equals(identifier)) 				return;		String old_identifier = identifier;		identifier = new_identifier;		pcs.firePropertyChange("identifier", old_identifier, new_identifier);	} 	/**	 * 	 * @return The Current Zoom Level	 * 	 */	public double getZoom() {		return getCanvas().getCamera().getViewScale();	}	/**	 * @param d  The New ZoomLevel	 */	public void setZoom(double d) {				Point2D point = getCanvas().getCamera().getBounds()				.getCenter2D();		point = getCanvas().getCamera().localToView(point);		getCanvas().getCamera().scaleViewAboutPoint(d, point.getX(),				point.getY());	}	/**	 * Fits all Viewable elements onto the Graph	 */	public void fitContent() {		SwingUtilities.invokeLater(new Runnable() {			public void run() {				getCanvas().getCamera().animateViewToCenterBounds(						getCanvas().getLayer().getFullBounds(), true, 500l);				if (getCanvas().getCamera().getViewScale() < .45) {					// getCanvas().setDefaultRenderQuality(PPaintContext.LOW_QUALITY_RENDERING);				}			}		});		// System.out.println( "Fitting Content: "+		// getCanvas().getLayer().getFullBounds() );		// try {		// PTransformActivity activity =		// getCanvas().getCamera().animateViewToCenterBounds(		// getCanvas().getLayer().getGlobalFullBounds(), true, 500l );		// getCanvas().getCamera().addActivity( activity );		// } catch ( Exception e ) {		// oh yes, this is hacky.		// }	}	/**	 * 	 * Do a global redraw of the entire canvas	 * 	 */	public void updateView() {		// getCanvas().getCamera().repaint();	}	/**	 * nodeViewsList only returns the NodeViews that are explicitly associated	 * with this GraphView	 */	public List<PNodeView> getNodeViews() {		ArrayList<PNodeView> list = new ArrayList<PNodeView>(getNodeViewCount());		for (FNode i : nodeViewMap.keySet())			list.add(nodeViewMap.get(i));		return list;	}	/**	 * 	 */	public int getNodeViewCount() {		return nodeViewMap.size();	}	/**	 * 	 */	public int getEdgeViewCount() {		return edgeViewMap.size();	}	/**	 * @param node  The FNode whose view is requested	 * @return The PNodeView of the given FNode	 * 	 */	public PNodeView getNodeView(FNode node) {		return nodeViewMap.get(node);	}	public List<PEdgeView> getEdgeViews() {		ArrayList<PEdgeView> list = new ArrayList<PEdgeView>(getEdgeViewCount());		for (FEdge i : edgeViewMap.keySet())			list.add(edgeViewMap.get(i));		return list;	}	/**	 * Return all of the EdgeViews in this GraphView	 */	public Iterator<PEdgeView> getEdgeViewsIterator() {		return getEdgeViews().iterator();	}	// implements GraphView	public PEdgeView getEdgeView(FEdge edge) {		return edgeViewMap.get(edge);	}	/**	 * Hides an Object that is in the Graph by removing it from the Piccolo	 * Scene Graph <B>Note:</B> The object must inherit from PNodeView or PEdgeView	 * 	 * @see PGraphView#hideNodeView( PNodeView )	 * @see PGraphView#hideNodeView( PNodeView, boolean )	 */	public void hideGraphObject(Object obj) {		if(obj instanceof PNodeView)		   removeNodeView((PNodeView) obj);		else if(obj instanceof PEdgeView)		   removeEdgeView((PEdgeView) obj);	}	/**	 * 	 * Shows an Object that is in the Graph by adding it to the	 * Piccolo Scene Graph	 * 	 * <B>Note:</B> The object must inherit from	 * PNodeView or PEdgeView	 * 	 * @see PNode	 * 	 */	public boolean showGraphObject(Object object) {		if (object == null) return false;				if (object instanceof PNodeView) {			if(!nodeViewMap.containsValue(object))			    nodeLayer.addChild((PNodeView) object);			return true;		} else if (object instanceof PEdgeView) {		    if(!edgeViewMap.containsValue(object))			   edgeLayer.addChild((PEdgeView) object);			return true;		} else {			return false;		}	}	/**	 * 	 * Hides a group of GraphObjects	 * 	 */	public boolean hideGraphObjects(List objects) {		Iterator pnodes = objects.iterator();		while (pnodes.hasNext()) {			hideGraphObject(pnodes.next());		}		return true;	}		    /**     * Set All Data For a NOde <B>Big Bold Faced Warning</B> <BR>     * Talk to rowan before using.     */    public void setAllNodePropertyData(FNode node_index, Object[] data)    {        nodeDataStore.put(node_index, data);    }    /*     * <B>Big Bold Faced Warning</B> <BR> Talk to rowan before using.     */    public Object[] getAllNodePropertyData(FNode node_index)    {        return nodeDataStore.get(node_index);    }    /**     * Set All Data For an FEdge <BR>     * <B>Big Bold Faced Warning</B> <BR>     * Talk to rowan before using.     */    public void setAllEdgePropertyData(FEdge edge_index, Object[] data)    {        edgeDataStore.put(edge_index, data);    }    /*     * <B>Big Bold Faced Warning</B> <BR> Talk to rowan before using.     */    public Object[] getAllEdgePropertyData(FEdge edge_index)    {        return (Object[]) edgeDataStore.get(edge_index);    }    /**     * Return the stored value for the node for the given property     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     */    public Object getNodeObjectProperty(FNode node_index, int property)    {        if (nodeDataStore.get(node_index) != null)        {            return nodeDataStore.get(node_index)[property];        }        // Error        return null;    }    /**     * @param edge_index The FNode Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setNodeObjectProperty(FNode node_index, int property,            Object value)    {        if (nodeDataStore.get(node_index) instanceof Object[])        {            Object[] data = nodeDataStore.get(node_index);            if (data.length > property)            {                nodeDataStore.get(node_index)[property] = value;                return true;            }            Object[] new_data = new Object[property + 1];            System.arraycopy(data, 0, new_data, 0, data.length);            new_data[property] = value;            nodeDataStore.put(node_index, new_data);            return true;        } else        {            // FNode data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = value;            nodeDataStore.put(node_index, new_data);            return true;        }    }    /**     * Return the stored value for the edge for the given property     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     */    public Object getEdgeObjectProperty(FEdge edge_index, int property)    {        if (edgeDataStore.get(edge_index) != null)        {            return ((Object[]) edgeDataStore.get(edge_index))[property];        }        // Error        return null;    }    /**     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setEdgeObjectProperty(FEdge edge_index, int property,            Object value)    {        if (edgeDataStore.get(edge_index) instanceof Object[])        {            Object[] data = (Object[]) edgeDataStore.get(edge_index);            if (data.length > property)            {                ((Object[]) edgeDataStore.get(edge_index))[property] = value;                return true;            }            Object[] new_data = new Object[property + 1];            System.arraycopy(data, 0, new_data, 0, data.length);            new_data[property] = value;            edgeDataStore.put(edge_index, new_data);            return true;        } else        {            // FEdge data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = value;            edgeDataStore.put(edge_index, new_data);            return true;        }    }    // ----------------------------------------    // ----------------------------------------    // Double Methods    // Nodes    /**     * This method stores the primitive type wrapped in a Double, however a     * double can be returned, if you don't want to use the Object property     * method.     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     */    public double getNodeDoubleProperty(FNode node_index, int property)    {        if (nodeDataStore.get(node_index) != null)            if (nodeDataStore.get(node_index)[property] instanceof Double)                return ((Double) nodeDataStore.get(node_index)[property]);        return 0;    }    /**     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setNodeDoubleProperty(FNode node_index, int property,            double value)    {        if (nodeDataStore.get(node_index) instanceof Object[])        {            Object[] data = nodeDataStore.get(node_index);            if (data.length > property)            {                if (nodeDataStore.get(node_index)[property] instanceof Double)                {                    nodeDataStore.get(node_index)[property] = value;                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Double(value);                nodeDataStore.put(node_index, new_data);                return true;            }        } else        {            // FNode data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Double(value);            nodeDataStore.put(node_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // Edges    /**     * This method stores the primitive type wrapped in a Double, however a     * double can be returned, if you don't want to use the Object property     * method.     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     */    public double getEdgeDoubleProperty(FEdge edge_index, int property)    {        if (edgeDataStore.get(edge_index) != null)        {            if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Double)            {                return ((Double) ((Object[]) edgeDataStore.get(edge_index))[property])                        .doubleValue();            }        }        return 0;    }    /**     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setEdgeDoubleProperty(FEdge edge_index, int property,            double value)    {        if (edgeDataStore.get(edge_index) instanceof Object[])        {            Object[] data = (Object[]) edgeDataStore.get(edge_index);            if (data.length > property)            {                if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Double)                {                    ((Object[]) edgeDataStore.get(edge_index))[property] = new Double(                            value);                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Double(value);                edgeDataStore.put(edge_index, new_data);                return true;            }        } else        {            // FEdge data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Double(value);            edgeDataStore.put(edge_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // ----------------------------------------    // ----------------------------------------    // Float Methods    // Nodes    /**     * This method stores the primitive type wrapped in a Float, however a float     * can be returned, if you don't want to use the Object property method.     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     */    public float getNodeFloatProperty(FNode node_index, int property)    {        if (nodeDataStore.get(node_index) != null)            if (nodeDataStore.get(node_index)[property] instanceof Float)                return ((Float)nodeDataStore.get(node_index)[property]);        return 0;    }    /**     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setNodeFloatProperty(FNode node_index, int property,            float value)    {        if (nodeDataStore.get(node_index) instanceof Object[])        {            Object[] data = (Object[]) nodeDataStore.get(node_index);            if (data.length > property)            {                if (nodeDataStore.get(node_index)[property] instanceof Float)                {                    nodeDataStore.get(node_index)[property] = value;                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Float(value);                nodeDataStore.put(node_index, new_data);                return true;            }        } else        {            // FNode data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Float(value);            nodeDataStore.put(node_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // Edges    /**     * This method stores the primitive type wrapped in a Float, however a float     * can be returned, if you don't want to use the Object property method.     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     */    public float getEdgeFloatProperty(FEdge edge_index, int property)    {        if (edgeDataStore.get(edge_index) != null)        {            if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Float)            {                return ((Float) ((Object[]) edgeDataStore.get(edge_index))[property])                        .floatValue();            }        }        return 0;    }    /**     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setEdgeFloatProperty(FEdge edge_index, int property,            float value)    {        if (edgeDataStore.get(edge_index) instanceof Object[])        {            Object[] data = (Object[]) edgeDataStore.get(edge_index);            if (data.length > property)            {                if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Float)                {                    ((Object[]) edgeDataStore.get(edge_index))[property] = new Float(                            value);                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Float(value);                edgeDataStore.put(edge_index, new_data);                return true;            }        } else        {            // FEdge data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Float(value);            edgeDataStore.put(edge_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // ----------------------------------------    // ----------------------------------------    // Boolean Methods    // Nodes    /**     * This method stores the primitive type wrapped in a Boolean, however a     * boolean can be returned, if you don't want to use the Object property     * method.     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     */    public boolean getNodeBooleanProperty(FNode node_index, int property)    {        if (nodeDataStore.get(node_index) != null)            if (nodeDataStore.get(node_index)[property] instanceof Boolean)                return ((Boolean) nodeDataStore.get(node_index)[property]);        return false;    }    /**     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setNodeBooleanProperty(FNode node_index, int property,            boolean value)    {        if (nodeDataStore.get(node_index) instanceof Object[])        {            Object[] data = nodeDataStore.get(node_index);            if (data.length > property)            {                if (nodeDataStore.get(node_index)[property] instanceof Boolean)                {                    nodeDataStore.get(node_index)[property] = value;                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Boolean(value);                nodeDataStore.put(node_index, new_data);                return true;            }        } else        {            // FNode data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Boolean(value);            nodeDataStore.put(node_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // Edges    /**     * This method stores the primitive type wrapped in a Boolean, however a     * boolean can be returned, if you don't want to use the Object property     * method.     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     */    public boolean getEdgeBooleanProperty(FEdge edge_index, int property)    {        if (edgeDataStore.get(edge_index) != null)        {            if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Boolean)            {                return ((Boolean) ((Object[]) edgeDataStore.get(edge_index))[property])                        .booleanValue();            }        }        return false;    }    /**     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setEdgeBooleanProperty(FEdge edge_index, int property,            boolean value)    {        if (edgeDataStore.get(edge_index) instanceof Object[])        {            Object[] data = (Object[]) edgeDataStore.get(edge_index);            if (data.length > property)            {                if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Boolean)                {                    ((Object[]) edgeDataStore.get(edge_index))[property] = new Boolean(                            value);                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Boolean(value);                edgeDataStore.put(edge_index, new_data);                return true;            }        } else        {            // FEdge data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Boolean(value);            edgeDataStore.put(edge_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // ----------------------------------------    // ----------------------------------------    // Integer Methods    // Nodes    /**     * This method stores the primitive type wrapped in a Integer, however a     * Integer can be returned, if you don't want to use the Object property     * method.     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     */    public int getNodeIntProperty(FNode node_index, int property)    {        if(nodeDataStore.get(node_index) != null)            if(nodeDataStore.get(node_index)[property] instanceof Integer)                return ((Integer)nodeDataStore.get(node_index)[property]);                    return 0;    }    /**     * @param node_index The FNode Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setNodeIntProperty(FNode node_index, int property, int value)    {        if (nodeDataStore.get(node_index) instanceof Object[])        {            Object[] data = nodeDataStore.get(node_index);            if (data.length > property)            {                if (nodeDataStore.get(node_index)[property] instanceof Integer)                {                    nodeDataStore.get(node_index)[property] = value;                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Integer(value);                nodeDataStore.put(node_index, new_data);                return true;            }        } else        {            // FNode data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Integer(value);            nodeDataStore.put(node_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }    // Edges    /**     * This method stores the primitive type wrapped in a Integer, however a     * Integer can be returned, if you don't want to use the Object property     * method.     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     */    public int getEdgeIntProperty(FEdge edge_index, int property)    {        if (edgeDataStore.get(edge_index) != null)        {            if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Integer)            {                return ((Integer) ((Object[]) edgeDataStore.get(edge_index))[property])                        .intValue();            }        }        return 0;    }    /**     * @param edge_index The FEdge Index to be queried     * @param property the property to be accessed     * @param value the new value for this property     */    public boolean setEdgeIntProperty(FEdge edge_index, int property, int value)    {        if (edgeDataStore.get(edge_index) instanceof Object[])        {            Object[] data = (Object[]) edgeDataStore.get(edge_index);            if (data.length > property)            {                if (((Object[]) edgeDataStore.get(edge_index))[property] instanceof Integer)                {                    ((Object[]) edgeDataStore.get(edge_index))[property] = new Integer(                            value);                    return true;                }            } else            {                // array not long enough                Object[] new_data = new Object[property + 1];                System.arraycopy(data, 0, new_data, 0, data.length);                new_data[property] = new Integer(value);                edgeDataStore.put(edge_index, new_data);                return true;            }        } else        {            // FEdge data not initialized            Object[] new_data = new Object[property + 1];            new_data[property] = new Integer(value);            edgeDataStore.put(edge_index, new_data);            return true;        }        // TODO: initilialize the data here.        return false;    }       } // class PGraphView