package phoebe.event;import java.awt.BasicStroke;import java.awt.Color;import java.awt.GradientPaint;import java.awt.event.InputEvent;import java.awt.geom.Point2D;import org.hypergraphdb.viewer.FEdge;import phoebe.*;import edu.umd.cs.piccolo.PCanvas;import edu.umd.cs.piccolo.PNode;import edu.umd.cs.piccolo.event.PBasicInputEventHandler;import edu.umd.cs.piccolo.event.PInputEvent;import edu.umd.cs.piccolo.event.PInputEventFilter;import edu.umd.cs.piccolo.nodes.PPath;import edu.umd.cs.piccolox.util.PNodeLocator;/** *  * Provides a way to Draw on the canvas by hilding down CTRL *  */public class PGraphEditEventHandler extends PBasicInputEventHandler{	// the node that will be dropped	protected PNodeView node;	protected PPath edge;	protected boolean edgeStarted;	// the mouse press location for the drop point	protected Point2D startPoint;	protected Point2D nextPoint;	// An ArrayList that holds multiple Point2D's	protected PCanvas canvas;	protected PGraphView view;	PNodeLocator locator;	/**	 * 	 * Creates a new PGraphEditEventHandler object.	 * 	 * 	 * 	 * @param canvas DOCUMENT ME!	 * 	 * @param view DOCUMENT ME!	 * 	 */	public PGraphEditEventHandler(PCanvas canvas, PGraphView view)	{		this.canvas = canvas;		this.view = view;		locator = new PNodeLocator(new PNode());		setEventFilter(new PInputEventFilter(InputEvent.BUTTON1_MASK));	}	/**	 * 	 * DOCUMENT ME!	 * 	 * 	 * 	 * @return DOCUMENT ME!	 * 	 */	public PCanvas getCanvas()	{		return canvas;	}	/**	 * 	 * DOCUMENT ME!	 * 	 * 	 * 	 * @param e DOCUMENT ME!	 * 	 */	public void mousePressed(PInputEvent e)	{		super.mousePressed(e);		if (e.isControlDown())		{			nextPoint = e.getPosition();			boolean onNode = false;			if (e.getPickedNode() instanceof PNodeView)			{				onNode = true;				locator.setNode(e.getPickedNode());				locator.locatePoint(nextPoint);				nextPoint = e.getPickedNode().localToGlobal(nextPoint);			}			if (onNode && !edgeStarted)			{				// Begin FEdge creation				edgeStarted = true;				node = (PNodeView) e.getPickedNode();				edge = new PPath();				getCanvas().getLayer().addChild(edge);				edge.setStroke(new BasicStroke((float) (1 / e.getCamera()						.getViewScale())));				edge.setPaint(Color.black);				startPoint = nextPoint;				updateEdge();			} else if (onNode && edgeStarted && (e.getPickedNode() != node))			{				// Finish FEdge Creation				edgeStarted = false;				updateEdge();				// From the Pick Path				PNodeView target = (PNodeView) e.getPickedNode();				// From Earlier				PNodeView source = node;				FEdge i = new FEdge(source.getNode(), target.getNode());				//if(!view.getGraphPerspective().addEdge(i))	return;				PEdgeView edgeView = (PEdgeView) view.addEdgeView(i);				edgeView.setStrokeWidth(4);				edgeView.setUnselectedPaint(new GradientPaint(1, 1,						Color.yellow, 20, 20, Color.magenta, true));				edgeView.setSelectedPaint(new GradientPaint(1, 1, Color.black,						20, 20, Color.white, true));				getCanvas().getLayer().removeChild(edge);				edge = null;				node = null;			}//			else if (!onNode && !edgeStarted)//			{//				// Create a FNode on Click//				int per_index = view.getGraphPerspective().restoreNode(//						view.getRootGraph().createNode());//				node = (PNodeView) view.addNodeView(per_index);//				node.setUnselectedPaint(java.awt.Color.orange);//				node.setSelectedPaint(java.awt.Color.red);//				((PNodeView) node).setOffset(nextPoint);//			}		}	}	// mousePressed	/**	 * 	 * DOCUMENT ME!	 * 	 * 	 * 	 * @param e DOCUMENT ME!	 * 	 */	public void mouseMoved(PInputEvent e)	{		super.mouseMoved(e);		if (edgeStarted)		{			// we need to update the latest section of the edge			nextPoint = e.getPosition();			updateEdge();		}	}	/**	 * 	 * DOCUMENT ME!	 * 	 */	public void updateEdge()	{		double x1 = startPoint.getX();		double y1 = startPoint.getY();		double x2 = nextPoint.getX();		double y2 = nextPoint.getY();		double lineLen = Math.sqrt(((x2 - x1) * (x2 - x1))				+ ((y2 - y1) * (y2 - y1)));		double offset = 5;		if (lineLen == 0) lineLen = 1;		y2 = y2 + (((y1 - y2) / lineLen) * offset);		x2 = x2 + (((x1 - x2) / lineLen) * offset);		nextPoint.setLocation(x2, y2);		edge.setPathToPolyline(new Point2D[] { startPoint, nextPoint });	}}