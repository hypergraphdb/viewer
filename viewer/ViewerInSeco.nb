<notebook title="/home/borislav/downloads/hgviewer/ViewerInSeco.nb">
    <cell-style bgColor="255,204,102"/>
    <output-cell-style borderColor="255,255,255" fgColor="0,128,0"/>
    <cell-group name="CG7">
        <cell html-preview="true">
            <data><![CDATA[<h2 style="text-align:center;">Working with HyperGraph and HGViewer in Seco
</h2>
<p style="text-align:left;">This is a short step-by-step tutorial describing some uses of HGViewer in Seco. First let's write few import statements that we'll need later on and open an empty HyperGraph.
</p>
]]>            </data>
        </cell>

    </cell-group>
    <cell-group name="CG8">
        <cell initialization="true">
            <data><![CDATA[import org.hypergraphdb.*;
import org.hypergraphdb.query.*; 
import org.hypergraphdb.viewer.*;
import org.hypergraphdb.atom.*;
import org.hypergraphdb.type.*;
import org.hypergraphdb.viewer.painter.*;
import org.hypergraphdb.viewer.phoebe.*;
import org.hypergraphdb.atom.*;
import seco.notebook.storage.*;  
import org.hypergraphdb.viewer.visual.*;
import org.hypergraphdb.viewer.actions.*;

type = new HGViewerType();
type.setHyperGraph(niche);
niche.getTypeSystem().addPredefinedType(HGViewerType.HGHANDLE, type,  HGViewer.class);

graph =HGEnvironment.get(System.getProperty("user.home") + File.separator + ".secoRepository");
]]>            </data>
        </cell>

    </cell-group>
    <cell-group name="CG9">
        <cell html-preview="true">
            <data><![CDATA[<p>Next we'll create the HGViewer component, the depth of displayed HyperGraph elements and the handle to focus around. In this case this will be the Top handle.
</p>
]]>            </data>
        </cell>

    </cell-group>
    <cell-group name="CG10">
        <cell>
            <data><![CDATA[hg = HGQuery.hg;
h = hg.findOne(graph, hg.type(Top.class));
comp = new HGViewer(graph, h, 2, null);
]]>            </data>
        </cell>

    </cell-group>
    <cell html-preview="true">
        <data><![CDATA[<p>
  <span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;">Here's the viewer. Note the dropdown menues in the bottom right corner. Few useful shortcuts to remember while working with the viewer's zoomable interface:</span>
</p>
<ul>
  <li><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;">Right Mouse Button Down + Drag Left </span><span style="color:#000000; font-style:normal; font-weight:bold; font-size:14; font-family:Dialog;">OR</span><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;"> Alt + Up = Zoom In</span>  
  </li>
  <li><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;">Right Mouse Button Down + Drag Right </span><span style="color:#000000; font-style:normal; font-weight:bold; font-size:14; font-family:Dialog;">OR</span><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;"> Alt + Down = Zoom Out</span>  
  </li>
  <li><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;">Ctrl + F = View is scaled to display all presented nodes</span>  
  </li>
  <li>Ctrl + L = Layout  
  </li>
  <li>Ctrl + H = Hide selected nodes&#160;  
  </li>
</ul>
<p><span style="color:#000000; font-style:normal; font-size:14; font-family:Dialog;">To inspect the node values, you should select some node and execute the following command Next you can use the received value in the previous script to create another view centered around the new value and probably based on a different condition.</span>
</p>
]]>        </data>
    </cell>
    <cell>
        <data><![CDATA[node = comp.getView().getSelectedNodeView();
hh = node.getNode().getHandle();
o = graph.get(hh);
]]>        </data>
    </cell>
    <cell html-preview="true">
        <data><![CDATA[<p>At this point the nodes in the viewer should look pretty ugly. So let's make them look better. The easiest way is by invoking the &quot;Add Painter&quot; command from the popup menu on a selected node. This will automaticaly create a painter for all the nodes of this type and will show a dialog with all the painter's properties.
</p>
<p>Of course it's possible to define a painter programmatically.
</p>
<p>(For more information on painters and styles you could look at &quot;Painters And Styles.nb&quot;). Next we'll define few generic painters which are responsible for drawing the nodes of a given type.
</p>
]]>        </data>
    </cell>
    <cell>
        <data><![CDATA[//helper function for adding generic painters  
public NodePainter makePainter(HyperGraph graph, Class cls, HGViewer view)
{
    painter = new DefaultNodePainter();
    typeH = graph.getTypeSystem().getTypeHandle(cls);
    comp.getView().getVisualStyle().addNodePainter(typeH, painter);
    return painter;
}
//adding generic and persistent painters 
painter = makePainter(graph, HGSubsumes.class, comp);
painter.setColor(Color.LIGHT_GRAY);
painter.setShape(Shape.ROUND_RECT);
//this is a very simple predefined painter, which returns the simple class name as a label and full class name as tooltip
painter1 = new SimpleLabelTooltipNodePainter(); 
typeH = graph.getPersistentHandle(graph.getTypeSystem().getTypeHandle(Top.class));
painter1.setColor(Color.RED);
painter1.setShape(Shape.DIAMOND);
comp.getView().getVisualStyle().addNodePainter(typeH, painter1);
comp.getView().redrawGraph();
]]>        </data>
    </cell>
    <cell-group name="CG0">
        <cell html-preview="true">
            <data><![CDATA[Here's an example of an edge painter which is defined inline and will not be persisted. Note the use the general paintEdge() method where we change the background color of the label, which is generally not supported by DefaultEdgePainter. If you wish you could add Image or some other fancy stuff there.
]]>            </data>
        </cell>
        <cell>
            <data><![CDATA[subsumesType = graph.getTypeSystem().getTypeHandle(HGSubsumes.class);
comp.getView().getVisualStyle().addEdgePainter(subsumesType,
        new DefaultEdgePainter()
        {
            public void paintEdge(PEdgeView v)
            {
                super.paintEdge(v);
                v.getLabel().setPaint(Color.WHITE);
            }
            public String getLabel()
            {
                return "subsumes";
            }
        }
 );
comp.getView().redrawGraph();
]]>            </data>
        </cell>

    </cell-group>
    <cell html-preview="true">
        <data><![CDATA[If the nodes are too many we can reduce the depth and refresh the viewer. Note that this is a fully refresh and it reads all the data from the underlying graph, so this method could be used to synchronise the viewer after some changes on the hypergraph.
]]>        </data>
    </cell>
    <cell-group name="CG0">
        <cell>
            <data><![CDATA[comp.setDepth(1); 
comp.refresh();
]]>            </data>
        </cell>

    </cell-group>
    <cell-group name="CG1">
        <cell html-preview="true">
            <data><![CDATA[Finally, if you need more space or wish to use HGViewer in a separate Frame, you could execute the following code:
]]>            </data>
        </cell>

    </cell-group>
    <cell-group name="CG0">
        <cell>
            <data><![CDATA[JFrame f = new JFrame();
HGHandle h = graph.getTypeSystem().getTypeHandle(HGStats.class);
viewer = new HGViewer(graph, h, 1, null);
f.getContentPane().add(viewer);
f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
f.addWindowListener(new WindowAdapter()
{
        public void windowClosing(WindowEvent e)
        {
                f.setVisible(false);
                //uncomment if you'd use only one instance  
                //graph.close();
        }
} );
f.setMinimumSize(new Dimension(600, 400));
f.setVisible(true);
]]>            </data>
        </cell>

    </cell-group>
</notebook>
